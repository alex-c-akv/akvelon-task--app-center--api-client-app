/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AppCenterApiClientLib.Client.SwaggerDateConverter;

namespace AppCenterApiClientLib.Model
{
    /// <summary>
    /// Configuration for export to Blob Storage with blob format
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
        public partial class ExportBlobConfiguration :  IEquatable<ExportBlobConfiguration>, IValidatableObject
    {
        /// <summary>
        /// The path to the blob when enum set to &#x27;WithoutAppId&#x27; is &#x27;year/month/day/hour/minute&#x27; and when set to &#x27;WithAppId&#x27; is &#x27;appId/year/month/day/hour/minute&#x27;
        /// </summary>
        /// <value>The path to the blob when enum set to &#x27;WithoutAppId&#x27; is &#x27;year/month/day/hour/minute&#x27; and when set to &#x27;WithAppId&#x27; is &#x27;appId/year/month/day/hour/minute&#x27;</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum BlobPathFormatKindEnum
        {
            /// <summary>
            /// Enum WithoutAppId for value: WithoutAppId
            /// </summary>
            [EnumMember(Value = "WithoutAppId")]
            WithoutAppId = 1,
            /// <summary>
            /// Enum WithAppId for value: WithAppId
            /// </summary>
            [EnumMember(Value = "WithAppId")]
            WithAppId = 2        }
        /// <summary>
        /// The path to the blob when enum set to &#x27;WithoutAppId&#x27; is &#x27;year/month/day/hour/minute&#x27; and when set to &#x27;WithAppId&#x27; is &#x27;appId/year/month/day/hour/minute&#x27;
        /// </summary>
        /// <value>The path to the blob when enum set to &#x27;WithoutAppId&#x27; is &#x27;year/month/day/hour/minute&#x27; and when set to &#x27;WithAppId&#x27; is &#x27;appId/year/month/day/hour/minute&#x27;</value>
        [DataMember(Name="blob_path_format_kind", EmitDefaultValue=false)]
        public BlobPathFormatKindEnum? BlobPathFormatKind { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportBlobConfiguration" /> class.
        /// </summary>
        /// <param name="blobPathFormatKind">The path to the blob when enum set to &#x27;WithoutAppId&#x27; is &#x27;year/month/day/hour/minute&#x27; and when set to &#x27;WithAppId&#x27; is &#x27;appId/year/month/day/hour/minute&#x27;.</param>
        public ExportBlobConfiguration(BlobPathFormatKindEnum? blobPathFormatKind = default(BlobPathFormatKindEnum?))
        {
            this.BlobPathFormatKind = blobPathFormatKind;
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExportBlobConfiguration {\n");
            sb.Append("  BlobPathFormatKind: ").Append(BlobPathFormatKind).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExportBlobConfiguration);
        }

        /// <summary>
        /// Returns true if ExportBlobConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of ExportBlobConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportBlobConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BlobPathFormatKind == input.BlobPathFormatKind ||
                    (this.BlobPathFormatKind != null &&
                    this.BlobPathFormatKind.Equals(input.BlobPathFormatKind))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BlobPathFormatKind != null)
                    hashCode = hashCode * 59 + this.BlobPathFormatKind.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
