/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AppCenterApiClientLib.Client.SwaggerDateConverter;

namespace AppCenterApiClientLib.Model
{
    /// <summary>
    /// ErrorGroup
    /// </summary>
    [DataContract]
        public partial class ErrorGroup :  IEquatable<ErrorGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorGroup" /> class.
        /// </summary>
        /// <param name="errorGroupId">errorGroupId.</param>
        /// <param name="appVersion">appVersion.</param>
        /// <param name="appBuild">appBuild.</param>
        /// <param name="count">count.</param>
        /// <param name="deviceCount">deviceCount.</param>
        /// <param name="firstOccurrence">firstOccurrence.</param>
        /// <param name="lastOccurrence">lastOccurrence.</param>
        /// <param name="exceptionType">exceptionType.</param>
        /// <param name="exceptionMessage">exceptionMessage.</param>
        /// <param name="exceptionClassName">exceptionClassName.</param>
        /// <param name="exceptionClassMethod">exceptionClassMethod.</param>
        /// <param name="exceptionMethod">exceptionMethod.</param>
        /// <param name="exceptionAppCode">exceptionAppCode.</param>
        /// <param name="exceptionFile">exceptionFile.</param>
        /// <param name="exceptionLine">exceptionLine.</param>
        /// <param name="codeRaw">codeRaw.</param>
        /// <param name="reasonFrames">reasonFrames.</param>
        /// <param name="hidden">hidden.</param>
        public ErrorGroup(string errorGroupId = default(string), string appVersion = default(string), string appBuild = default(string), long? count = default(long?), long? deviceCount = default(long?), DateTime? firstOccurrence = default(DateTime?), DateTime? lastOccurrence = default(DateTime?), string exceptionType = default(string), string exceptionMessage = default(string), string exceptionClassName = default(string), bool? exceptionClassMethod = default(bool?), string exceptionMethod = default(string), bool? exceptionAppCode = default(bool?), string exceptionFile = default(string), string exceptionLine = default(string), string codeRaw = default(string), List<ErrorGroupListItemReasonFrames> reasonFrames = default(List<ErrorGroupListItemReasonFrames>), bool? hidden = default(bool?))
        {
            this.ErrorGroupId = errorGroupId;
            this.AppVersion = appVersion;
            this.AppBuild = appBuild;
            this.Count = count;
            this.DeviceCount = deviceCount;
            this.FirstOccurrence = firstOccurrence;
            this.LastOccurrence = lastOccurrence;
            this.ExceptionType = exceptionType;
            this.ExceptionMessage = exceptionMessage;
            this.ExceptionClassName = exceptionClassName;
            this.ExceptionClassMethod = exceptionClassMethod;
            this.ExceptionMethod = exceptionMethod;
            this.ExceptionAppCode = exceptionAppCode;
            this.ExceptionFile = exceptionFile;
            this.ExceptionLine = exceptionLine;
            this.CodeRaw = codeRaw;
            this.ReasonFrames = reasonFrames;
            this.Hidden = hidden;
        }
        
        /// <summary>
        /// Gets or Sets ErrorGroupId
        /// </summary>
        [DataMember(Name="errorGroupId", EmitDefaultValue=false)]
        public string ErrorGroupId { get; set; }

        /// <summary>
        /// Gets or Sets AppVersion
        /// </summary>
        [DataMember(Name="appVersion", EmitDefaultValue=false)]
        public string AppVersion { get; set; }

        /// <summary>
        /// Gets or Sets AppBuild
        /// </summary>
        [DataMember(Name="appBuild", EmitDefaultValue=false)]
        public string AppBuild { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public long? Count { get; set; }

        /// <summary>
        /// Gets or Sets DeviceCount
        /// </summary>
        [DataMember(Name="deviceCount", EmitDefaultValue=false)]
        public long? DeviceCount { get; set; }

        /// <summary>
        /// Gets or Sets FirstOccurrence
        /// </summary>
        [DataMember(Name="firstOccurrence", EmitDefaultValue=false)]
        public DateTime? FirstOccurrence { get; set; }

        /// <summary>
        /// Gets or Sets LastOccurrence
        /// </summary>
        [DataMember(Name="lastOccurrence", EmitDefaultValue=false)]
        public DateTime? LastOccurrence { get; set; }

        /// <summary>
        /// Gets or Sets ExceptionType
        /// </summary>
        [DataMember(Name="exceptionType", EmitDefaultValue=false)]
        public string ExceptionType { get; set; }

        /// <summary>
        /// Gets or Sets ExceptionMessage
        /// </summary>
        [DataMember(Name="exceptionMessage", EmitDefaultValue=false)]
        public string ExceptionMessage { get; set; }

        /// <summary>
        /// Gets or Sets ExceptionClassName
        /// </summary>
        [DataMember(Name="exceptionClassName", EmitDefaultValue=false)]
        public string ExceptionClassName { get; set; }

        /// <summary>
        /// Gets or Sets ExceptionClassMethod
        /// </summary>
        [DataMember(Name="exceptionClassMethod", EmitDefaultValue=false)]
        public bool? ExceptionClassMethod { get; set; }

        /// <summary>
        /// Gets or Sets ExceptionMethod
        /// </summary>
        [DataMember(Name="exceptionMethod", EmitDefaultValue=false)]
        public string ExceptionMethod { get; set; }

        /// <summary>
        /// Gets or Sets ExceptionAppCode
        /// </summary>
        [DataMember(Name="exceptionAppCode", EmitDefaultValue=false)]
        public bool? ExceptionAppCode { get; set; }

        /// <summary>
        /// Gets or Sets ExceptionFile
        /// </summary>
        [DataMember(Name="exceptionFile", EmitDefaultValue=false)]
        public string ExceptionFile { get; set; }

        /// <summary>
        /// Gets or Sets ExceptionLine
        /// </summary>
        [DataMember(Name="exceptionLine", EmitDefaultValue=false)]
        public string ExceptionLine { get; set; }

        /// <summary>
        /// Gets or Sets CodeRaw
        /// </summary>
        [DataMember(Name="codeRaw", EmitDefaultValue=false)]
        public string CodeRaw { get; set; }

        /// <summary>
        /// Gets or Sets ReasonFrames
        /// </summary>
        [DataMember(Name="reasonFrames", EmitDefaultValue=false)]
        public List<ErrorGroupListItemReasonFrames> ReasonFrames { get; set; }

        /// <summary>
        /// Gets or Sets Hidden
        /// </summary>
        [DataMember(Name="hidden", EmitDefaultValue=false)]
        public bool? Hidden { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErrorGroup {\n");
            sb.Append("  ErrorGroupId: ").Append(ErrorGroupId).Append("\n");
            sb.Append("  AppVersion: ").Append(AppVersion).Append("\n");
            sb.Append("  AppBuild: ").Append(AppBuild).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  DeviceCount: ").Append(DeviceCount).Append("\n");
            sb.Append("  FirstOccurrence: ").Append(FirstOccurrence).Append("\n");
            sb.Append("  LastOccurrence: ").Append(LastOccurrence).Append("\n");
            sb.Append("  ExceptionType: ").Append(ExceptionType).Append("\n");
            sb.Append("  ExceptionMessage: ").Append(ExceptionMessage).Append("\n");
            sb.Append("  ExceptionClassName: ").Append(ExceptionClassName).Append("\n");
            sb.Append("  ExceptionClassMethod: ").Append(ExceptionClassMethod).Append("\n");
            sb.Append("  ExceptionMethod: ").Append(ExceptionMethod).Append("\n");
            sb.Append("  ExceptionAppCode: ").Append(ExceptionAppCode).Append("\n");
            sb.Append("  ExceptionFile: ").Append(ExceptionFile).Append("\n");
            sb.Append("  ExceptionLine: ").Append(ExceptionLine).Append("\n");
            sb.Append("  CodeRaw: ").Append(CodeRaw).Append("\n");
            sb.Append("  ReasonFrames: ").Append(ReasonFrames).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ErrorGroup);
        }

        /// <summary>
        /// Returns true if ErrorGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of ErrorGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorGroup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ErrorGroupId == input.ErrorGroupId ||
                    (this.ErrorGroupId != null &&
                    this.ErrorGroupId.Equals(input.ErrorGroupId))
                ) && 
                (
                    this.AppVersion == input.AppVersion ||
                    (this.AppVersion != null &&
                    this.AppVersion.Equals(input.AppVersion))
                ) && 
                (
                    this.AppBuild == input.AppBuild ||
                    (this.AppBuild != null &&
                    this.AppBuild.Equals(input.AppBuild))
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.DeviceCount == input.DeviceCount ||
                    (this.DeviceCount != null &&
                    this.DeviceCount.Equals(input.DeviceCount))
                ) && 
                (
                    this.FirstOccurrence == input.FirstOccurrence ||
                    (this.FirstOccurrence != null &&
                    this.FirstOccurrence.Equals(input.FirstOccurrence))
                ) && 
                (
                    this.LastOccurrence == input.LastOccurrence ||
                    (this.LastOccurrence != null &&
                    this.LastOccurrence.Equals(input.LastOccurrence))
                ) && 
                (
                    this.ExceptionType == input.ExceptionType ||
                    (this.ExceptionType != null &&
                    this.ExceptionType.Equals(input.ExceptionType))
                ) && 
                (
                    this.ExceptionMessage == input.ExceptionMessage ||
                    (this.ExceptionMessage != null &&
                    this.ExceptionMessage.Equals(input.ExceptionMessage))
                ) && 
                (
                    this.ExceptionClassName == input.ExceptionClassName ||
                    (this.ExceptionClassName != null &&
                    this.ExceptionClassName.Equals(input.ExceptionClassName))
                ) && 
                (
                    this.ExceptionClassMethod == input.ExceptionClassMethod ||
                    (this.ExceptionClassMethod != null &&
                    this.ExceptionClassMethod.Equals(input.ExceptionClassMethod))
                ) && 
                (
                    this.ExceptionMethod == input.ExceptionMethod ||
                    (this.ExceptionMethod != null &&
                    this.ExceptionMethod.Equals(input.ExceptionMethod))
                ) && 
                (
                    this.ExceptionAppCode == input.ExceptionAppCode ||
                    (this.ExceptionAppCode != null &&
                    this.ExceptionAppCode.Equals(input.ExceptionAppCode))
                ) && 
                (
                    this.ExceptionFile == input.ExceptionFile ||
                    (this.ExceptionFile != null &&
                    this.ExceptionFile.Equals(input.ExceptionFile))
                ) && 
                (
                    this.ExceptionLine == input.ExceptionLine ||
                    (this.ExceptionLine != null &&
                    this.ExceptionLine.Equals(input.ExceptionLine))
                ) && 
                (
                    this.CodeRaw == input.CodeRaw ||
                    (this.CodeRaw != null &&
                    this.CodeRaw.Equals(input.CodeRaw))
                ) && 
                (
                    this.ReasonFrames == input.ReasonFrames ||
                    this.ReasonFrames != null &&
                    input.ReasonFrames != null &&
                    this.ReasonFrames.SequenceEqual(input.ReasonFrames)
                ) && 
                (
                    this.Hidden == input.Hidden ||
                    (this.Hidden != null &&
                    this.Hidden.Equals(input.Hidden))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ErrorGroupId != null)
                    hashCode = hashCode * 59 + this.ErrorGroupId.GetHashCode();
                if (this.AppVersion != null)
                    hashCode = hashCode * 59 + this.AppVersion.GetHashCode();
                if (this.AppBuild != null)
                    hashCode = hashCode * 59 + this.AppBuild.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.DeviceCount != null)
                    hashCode = hashCode * 59 + this.DeviceCount.GetHashCode();
                if (this.FirstOccurrence != null)
                    hashCode = hashCode * 59 + this.FirstOccurrence.GetHashCode();
                if (this.LastOccurrence != null)
                    hashCode = hashCode * 59 + this.LastOccurrence.GetHashCode();
                if (this.ExceptionType != null)
                    hashCode = hashCode * 59 + this.ExceptionType.GetHashCode();
                if (this.ExceptionMessage != null)
                    hashCode = hashCode * 59 + this.ExceptionMessage.GetHashCode();
                if (this.ExceptionClassName != null)
                    hashCode = hashCode * 59 + this.ExceptionClassName.GetHashCode();
                if (this.ExceptionClassMethod != null)
                    hashCode = hashCode * 59 + this.ExceptionClassMethod.GetHashCode();
                if (this.ExceptionMethod != null)
                    hashCode = hashCode * 59 + this.ExceptionMethod.GetHashCode();
                if (this.ExceptionAppCode != null)
                    hashCode = hashCode * 59 + this.ExceptionAppCode.GetHashCode();
                if (this.ExceptionFile != null)
                    hashCode = hashCode * 59 + this.ExceptionFile.GetHashCode();
                if (this.ExceptionLine != null)
                    hashCode = hashCode * 59 + this.ExceptionLine.GetHashCode();
                if (this.CodeRaw != null)
                    hashCode = hashCode * 59 + this.CodeRaw.GetHashCode();
                if (this.ReasonFrames != null)
                    hashCode = hashCode * 59 + this.ReasonFrames.GetHashCode();
                if (this.Hidden != null)
                    hashCode = hashCode * 59 + this.Hidden.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
