/* 
 * App Center Client
 *
 * Microsoft Visual Studio App Center API
 *
 * OpenAPI spec version: v0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AppCenterApiClientLib.Client.SwaggerDateConverter;

namespace AppCenterApiClientLib.Model
{
    /// <summary>
    /// VSTS bugtracker specific settings
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
        public partial class AlertingVstsBugtrackerSettings :  IEquatable<AlertingVstsBugtrackerSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertingVstsBugtrackerSettings" /> class.
        /// </summary>
        /// <param name="vstsProjectId">vstsProjectId.</param>
        /// <param name="vstsProjectUri">vstsProjectUri.</param>
        /// <param name="vstsProjectName">vstsProjectName.</param>
        /// <param name="vstsAccountName">vstsAccountName.</param>
        /// <param name="vstsAreaPath">vstsAreaPath.</param>
        /// <param name="vstsDefaultPayload">vstsDefaultPayload.</param>
        public AlertingVstsBugtrackerSettings(string vstsProjectId = default(string), string vstsProjectUri = default(string), string vstsProjectName = default(string), string vstsAccountName = default(string), string vstsAreaPath = default(string), Object vstsDefaultPayload = default(Object))
        {
            this.VstsProjectId = vstsProjectId;
            this.VstsProjectUri = vstsProjectUri;
            this.VstsProjectName = vstsProjectName;
            this.VstsAccountName = vstsAccountName;
            this.VstsAreaPath = vstsAreaPath;
            this.VstsDefaultPayload = vstsDefaultPayload;
        }
        
        /// <summary>
        /// Gets or Sets VstsProjectId
        /// </summary>
        [DataMember(Name="vsts_project_id", EmitDefaultValue=false)]
        public string VstsProjectId { get; set; }

        /// <summary>
        /// Gets or Sets VstsProjectUri
        /// </summary>
        [DataMember(Name="vsts_project_uri", EmitDefaultValue=false)]
        public string VstsProjectUri { get; set; }

        /// <summary>
        /// Gets or Sets VstsProjectName
        /// </summary>
        [DataMember(Name="vsts_project_name", EmitDefaultValue=false)]
        public string VstsProjectName { get; set; }

        /// <summary>
        /// Gets or Sets VstsAccountName
        /// </summary>
        [DataMember(Name="vsts_account_name", EmitDefaultValue=false)]
        public string VstsAccountName { get; set; }

        /// <summary>
        /// Gets or Sets VstsAreaPath
        /// </summary>
        [DataMember(Name="vsts_area_path", EmitDefaultValue=false)]
        public string VstsAreaPath { get; set; }

        /// <summary>
        /// Gets or Sets VstsDefaultPayload
        /// </summary>
        [DataMember(Name="vsts_default_payload", EmitDefaultValue=false)]
        public Object VstsDefaultPayload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlertingVstsBugtrackerSettings {\n");
            sb.Append("  VstsProjectId: ").Append(VstsProjectId).Append("\n");
            sb.Append("  VstsProjectUri: ").Append(VstsProjectUri).Append("\n");
            sb.Append("  VstsProjectName: ").Append(VstsProjectName).Append("\n");
            sb.Append("  VstsAccountName: ").Append(VstsAccountName).Append("\n");
            sb.Append("  VstsAreaPath: ").Append(VstsAreaPath).Append("\n");
            sb.Append("  VstsDefaultPayload: ").Append(VstsDefaultPayload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlertingVstsBugtrackerSettings);
        }

        /// <summary>
        /// Returns true if AlertingVstsBugtrackerSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of AlertingVstsBugtrackerSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertingVstsBugtrackerSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VstsProjectId == input.VstsProjectId ||
                    (this.VstsProjectId != null &&
                    this.VstsProjectId.Equals(input.VstsProjectId))
                ) && 
                (
                    this.VstsProjectUri == input.VstsProjectUri ||
                    (this.VstsProjectUri != null &&
                    this.VstsProjectUri.Equals(input.VstsProjectUri))
                ) && 
                (
                    this.VstsProjectName == input.VstsProjectName ||
                    (this.VstsProjectName != null &&
                    this.VstsProjectName.Equals(input.VstsProjectName))
                ) && 
                (
                    this.VstsAccountName == input.VstsAccountName ||
                    (this.VstsAccountName != null &&
                    this.VstsAccountName.Equals(input.VstsAccountName))
                ) && 
                (
                    this.VstsAreaPath == input.VstsAreaPath ||
                    (this.VstsAreaPath != null &&
                    this.VstsAreaPath.Equals(input.VstsAreaPath))
                ) && 
                (
                    this.VstsDefaultPayload == input.VstsDefaultPayload ||
                    (this.VstsDefaultPayload != null &&
                    this.VstsDefaultPayload.Equals(input.VstsDefaultPayload))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VstsProjectId != null)
                    hashCode = hashCode * 59 + this.VstsProjectId.GetHashCode();
                if (this.VstsProjectUri != null)
                    hashCode = hashCode * 59 + this.VstsProjectUri.GetHashCode();
                if (this.VstsProjectName != null)
                    hashCode = hashCode * 59 + this.VstsProjectName.GetHashCode();
                if (this.VstsAccountName != null)
                    hashCode = hashCode * 59 + this.VstsAccountName.GetHashCode();
                if (this.VstsAreaPath != null)
                    hashCode = hashCode * 59 + this.VstsAreaPath.GetHashCode();
                if (this.VstsDefaultPayload != null)
                    hashCode = hashCode * 59 + this.VstsDefaultPayload.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
